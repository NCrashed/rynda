#version 440
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

uniform vec2 vp;
uniform float np;
uniform float segment;
uniform mat4 mvp_inv;

layout (rgba8, binding = 0) uniform image2D img_output;

#define FLT_MAX 3.402823466e+38
// #define FLT_MIN 1.175494351e-38

/// Project render space vector to world XZ plane 
vec2 projectXZ(vec2 v) {
    vec4 pv = mvp_inv * vec4(v.x, v.y, 0, 1.0);
    return pv.xy / pv.w;
}

/// Intersect 2D lines defined by 2 points.
bool intesect2d(vec2 p1, vec2 p2, vec2 p3, vec2 p4, out vec2 crossed) {
    float dx1 = p1.x - p2.x;
    float dx2 = p3.x - p4.x;
    float dy1 = p1.y - p2.y;
    float dy2 = p3.y - p4.y;
    float dt = dx1 * dy2 - dy1 * dx2; // if zero never cross
    if (dt == 0.0) {
        return false;
    }

    float a = p1.x * p2.y - p1.y * p2.x;
    float b = p3.x * p4.y - p3.y * p4.x;
    float px = a * dx2 - dx1 * b;
    float py = a * dy2 - dy1 * b;

    crossed = vec2(px / dt, py / dt);
    return true;
}

float signed_length(vec2 dir, vec2 v) {
    return length(v) * sign(dot(dir, v));
}

/// Remap from -1.0 .. 1.0 to 0.0 .. 1.0
ivec2 remap_uv(vec2 v, ivec2 size) {
    ivec2 iv = ivec2(int((v.x + 1.0) * float(size.x) * 0.5), int((v.y + 1.0) * float(size.y) * 0.5));
    if (iv.x == size.x) {
        iv.x = size.x-1;
    } 
    if (iv.y == size.y) {
        iv.y = size.y-1;
    }
    return iv;
}

/// Intersects 2D rect (min corner and size) with line, returns false if no crossing occurs and two points in case of success
bool intersectRect(vec2 corner, vec2 size, vec2 p1, vec2 p2, out vec2 in_p, out vec2 out_p) {
    vec2 min_p = p1;
    vec2 max_p = p1;
    bool inside = p1.x > corner.x && p1.x < corner.x + size.x && p1.y > corner.y && p1.y < corner.y + size.y;
    float max_d = 0.0;
    float min_d = FLT_MAX;
    if (inside) {
        min_d = 0.0;
    }
    bool cross_result = inside;
    vec2 dt = p2 - p1; 
    vec2 cross_p;

    bool crossed = intesect2d(corner, corner + vec2(size.x, 0.0), p1, p2, cross_p);
    if (crossed && cross_p.x > corner.x && cross_p.x < corner.x + size.x) {
        float d = signed_length(dt, cross_p - p1); 
        if (d > 0.0) {
            if (d < min_d) {
                min_d = d;
                min_p = cross_p;
                cross_result = true;
            }
            if (d > max_d) {
                max_d = d; 
                max_p = cross_p;
                cross_result = true;
            }
        }
    }

    crossed = intesect2d(corner, corner + vec2(0.0, size.y), p1, p2, cross_p);
    if (crossed && cross_p.y > corner.y && cross_p.y < corner.y + size.y) {
        float d = signed_length(dt, cross_p - p1); 
        if (d > 0.0) {
            if (d < min_d) {
                min_d = d;
                min_p = cross_p;
                cross_result = true;
            }
            if (d > max_d) {
                max_d = d; 
                max_p = cross_p;
                cross_result = true;
            }
        }
    }

    crossed = intesect2d(corner + vec2(0.0, size.y), corner + size, p1, p2, cross_p);
    if (crossed && cross_p.x > corner.x && cross_p.x < corner.x + size.x) {
        float d = signed_length(dt, cross_p - p1); 
        if (d > 0.0) {
            if (d < min_d) {
                min_d = d;
                min_p = cross_p;
                cross_result = true;
            }
            if (d > max_d) {
                max_d = d; 
                max_p = cross_p;
                cross_result = true;
            }
        }
    }

    crossed = intesect2d(corner + vec2(size.x, 0.0), corner + size, p1, p2, cross_p);
    if (crossed && cross_p.y > corner.y && cross_p.y < corner.y + size.y) {
        float d = signed_length(dt, cross_p - p1); 
        if (d > 0.0) {
            if (d < min_d) {
                min_d = d;
                min_p = cross_p;
                cross_result = true;
            }
            if (d > max_d) {
                max_d = d; 
                max_p = cross_p;
                cross_result = true;
            }
        }
    }

    in_p = min_p;
    out_p = max_p;
    return crossed;
}

void main() {
    uint line_i = uint(gl_GlobalInvocationID.x);
    ivec2 size = imageSize(img_output);
    vec4 base_color; 
    vec4 diff_color;
    int line_start = int(float(line_i * size.y) / np);
    uint line_width = uint(float(size.y) / np);
    float plane_offset = float(line_i) * 2 / np - 1.0;

    if (segment < 1.0) {
        base_color = vec4(0.4 + vp.x * 0.1, 0.0, 0.0, 1.0);
        diff_color = vec4(0.6, 0.0, 0.0, 1.0);
    } else if (segment < 2.0) {
        base_color = vec4(0.0, 0.4, 0.0, 1.0);
        diff_color = vec4(0.0, 0.6, 0.0, 1.0);
    } else if (segment < 3.0) {
        base_color = vec4(0.0, 0.0, 0.4, 1.0);
        diff_color = vec4(0.0, 0.0, 0.6, 1.0);
    } else {
        base_color = vec4(0.4, 0.0, 0.4, 1.0);
        diff_color = vec4(0.6, 0.0, 0.6, 1.0);    
    }

    vec2 p1 = projectXZ(vp);
    vec2 p2 = projectXZ(vec2(plane_offset, 1.0));
    vec2 in_p;
    vec2 out_p;
    if (intersectRect(vec2(-1.0, -1.0), vec2(2.0, 2.0), p1, p2, in_p, out_p)) {
        ivec2 pixel_in = remap_uv(in_p, size);
        ivec2 pixel_out = remap_uv(out_p, size);
        if (pixel_in == pixel_out) {
            imageStore(img_output, pixel_in, vec4(1.0, 1.0, 0.0, 1.0));
        } else {
            imageStore(img_output, pixel_in, vec4(1.0, 0.0, 0.0, 1.0));
            imageStore(img_output, pixel_out, vec4(0.0, 1.0, 0.0, 1.0));
        }
    }
    // vec2 cross_p; 
    // bool crossed = intesect2d(vec2(-1.0, 1.0), vec2(1.0, 1.0), p1, p2, cross_p);
    // if (crossed && cross_p.x > -1.0 && cross_p.x < 1.0) {
    //     ivec2 pixel_coord = ivec2(int((cross_p.x + 1.0) * float(size.x) * 0.5), 0);
    //     imageStore(img_output, pixel_coord, vec4(1.0, 0.0, 0.0, 1.0));
    // }

    // crossed = intesect2d(vec2(-1.0, -1.0), vec2(-1.0, 1.0), p1, p2, cross_p);
    // if (crossed && cross_p.y > -1.0 && cross_p.y < 1.0) {
    //     ivec2 pixel_coord = ivec2(0, int((cross_p.y + 1.0) * float(size.y) * 0.5));
    //     imageStore(img_output, pixel_coord, vec4(1.0, 0.0, 0.0, 1.0));
    // }

    // crossed = intesect2d(vec2(-1.0, -1.0), vec2(1.0, -1.0), p1, p2, cross_p);
    // if (crossed && cross_p.x > -1.0 && cross_p.x < 1.0) {
    //     ivec2 pixel_coord = ivec2(int((cross_p.x + 1.0) * float(size.x) * 0.5), size.y-1);
    //     imageStore(img_output, pixel_coord, vec4(1.0, 0.0, 0.0, 1.0));
    // }

    // crossed = intesect2d(vec2(1.0, -1.0), vec2(1.0, 1.0), p1, p2, cross_p);
    // if (crossed && cross_p.y > -1.0 && cross_p.y < 1.0) {
    //     ivec2 pixel_coord = ivec2(size.x-1, int((cross_p.y + 1.0) * float(size.y) * 0.5));
    //     imageStore(img_output, pixel_coord, vec4(1.0, 0.0, 0.0, 1.0));
    // }

    // for(int j=0; j<=line_width; ++j) {
    //     for(int i=0; i<=uint(size.x); ++i) {
    //         ivec2 pixel_coord = ivec2(int(i), line_start + int(j));
    //         if ((i / 40) % 2 == 0) {
    //             imageStore(img_output, pixel_coord, base_color);
    //         } else {
    //             //imageStore(img_output, pixel_coord, diff_color);
    //         }
    //     }
    // }
}